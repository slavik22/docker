// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tutorial.sql

package db

import (
	"context"
)

const createTutorial = `-- name: CreateTutorial :one
INSERT INTO "tutorial" (
    user_id,
    material,
    title
) VALUES ($1, $2, $3) RETURNING id, user_id, material, title
`

type CreateTutorialParams struct {
	UserID   int32  `json:"user_id"`
	Material string `json:"material"`
	Title    string `json:"title"`
}

func (q *Queries) CreateTutorial(ctx context.Context, arg CreateTutorialParams) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, createTutorial, arg.UserID, arg.Material, arg.Title)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Material,
		&i.Title,
	)
	return i, err
}

const deleteTutorial = `-- name: DeleteTutorial :exec
DELETE FROM "tutorial"
WHERE id = $1
`

func (q *Queries) DeleteTutorial(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTutorial, id)
	return err
}

const getTutorial = `-- name: GetTutorial :one
SELECT id, user_id, material, title FROM "tutorial"
WHERE id = $1
`

func (q *Queries) GetTutorial(ctx context.Context, id int32) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, getTutorial, id)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Material,
		&i.Title,
	)
	return i, err
}

const getTutorials = `-- name: GetTutorials :many
SELECT id, user_id, material, title FROM "tutorial"
`

func (q *Queries) GetTutorials(ctx context.Context) ([]Tutorial, error) {
	rows, err := q.db.QueryContext(ctx, getTutorials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutorial
	for rows.Next() {
		var i Tutorial
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Material,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTutorialsByUser = `-- name: GetTutorialsByUser :many
SELECT id, user_id, material, title FROM "tutorial"
WHERE user_id = $1
`

func (q *Queries) GetTutorialsByUser(ctx context.Context, userID int32) ([]Tutorial, error) {
	rows, err := q.db.QueryContext(ctx, getTutorialsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutorial
	for rows.Next() {
		var i Tutorial
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Material,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTutorial = `-- name: UpdateTutorial :one
UPDATE "tutorial"
SET
    title = $2,
    material = $3
WHERE id = $1
    RETURNING id, user_id, material, title
`

type UpdateTutorialParams struct {
	ID       int32  `json:"id"`
	Title    string `json:"title"`
	Material string `json:"material"`
}

func (q *Queries) UpdateTutorial(ctx context.Context, arg UpdateTutorialParams) (Tutorial, error) {
	row := q.db.QueryRowContext(ctx, updateTutorial, arg.ID, arg.Title, arg.Material)
	var i Tutorial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Material,
		&i.Title,
	)
	return i, err
}
